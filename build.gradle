plugins {
    id 'java'
    id 'scala'
//    id "com.github.lkishalmi.gatling" version "3.0.2"
}

group 'com.bharathk'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    //gatling
    implementation 'org.scala-lang:scala-library:2.12.8'

    //restAssured dependencies
    testImplementation 'io.rest-assured:rest-assured:4.1.2'
    testImplementation 'io.rest-assured:json-path:4.1.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    //karate dependencies
    testCompile group: 'com.intuit.karate', name: 'karate-apache', version: '0.9.3'
    testCompile group: 'com.intuit.karate', name: 'karate-junit4', version: '0.9.3'
    testCompile group: 'com.intuit.karate', name: 'karate-gatling', version: '0.9.3'
    testCompile group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '3.0.2'
    testCompile "io.gatling:gatling-app:3.0.2"
    
}

sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources', 'src/test/java']
        }
    }
}

test {
    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}

task gatlingRun(type: JavaExec) {
    group = 'Web Tests'
    description = 'Run Gatling Tests'

    new File("${buildDir}/reports/gatling").mkdirs()

    classpath = sourceSets.test.runtimeClasspath

    main = "io.gatling.app.Gatling"
    args = [
            '-s', 'features.EmployeeSimulation',
            '-rf', "${buildDir}/reports/gatling"
    ]
    systemProperties System.properties
}
